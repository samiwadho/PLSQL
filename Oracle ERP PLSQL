                      Practice 01
                  Declaring Variables
Q1. Evaluate each of the following declarations. Which of them are not legal 
and explain why.

Answer
a. DECLARE 
V_id NUMBER(4);
Legal

b. DECLARE 
V_x ,v_y , v_z VARCHAR2(10);
Illegal Because only one identifier per declaration is 
allowed.

c. DECLARE
V_birthdate DATE NOT NULL;
Illegal Because the NOT NULL variable must be initialized .

d. DECLARE 
V_in_stock BOOLEAN :=1;
Illegal Because 1 is not a BOOLEAN Expression.

Q2. In each of the following assignments, indicates whether the statement is 
valid and what the valid data type of the result will be .

Answer
a. V_days_to_go := v_due_date – SYSDATE;
Valid ; NUMBER

b. V_sender := USER || ‘ : ‘|| TO_CHAR(v_dept_no);
Valid ; Character String

c. v_sum := $100,000+$250,000;
illegal ; PL / SQL can not convert special symbols from 
VARCHAR2 to NUMBER

d. v_flag := TRUE; 
Valid : BOOLEAN

e. v_nl := v_n2> (2* v_n3);
Valid ; BOOLEAN

f. v_value := NULL;
Valid ; any scalar data type.

Q3. Create a anonymous block to output the phrase 
“My PL/SQL Block Works” to screen.

Answer
VARIABLE g_message VARCHAR2(40);
DECLARE 
v_message VARCHAR2(40);
BEGIN 
v_message := 'MY PL/SQL Block Works';
:g_message := v_message;
END;


Q4. Create a block that declares two variables. Assign the values of these 
PL/SQL variables to iSQL*Plus host variables and print the result of the 
PL/SQL variables to the screen.
V_CHAR Character (variable length)
V_NUM Number
Assign values to these variables as followes
Variable values
V_CHAR The literal ’42 is the answer’
V_NUM The first two Characters from V_CHAR

Answer:
VARIABLE g_char VARCHAR2(40)
VARIABLE g_num NUMBER
DECLARE 
v_char VARCHAR2(40);
v_num NUMBER (10,2);
BEGIN
v_char := ’42 is the answer’;
v_num:=42;
:g_char :=v_char;
:g_num :=v_num;
END;



                 Practice : 02
         Write Executable Statements
PL/SQL BLOCK
DECLARE 
v_weight NUMBER(3) :600;
v_message VARCHAR2(255) := ‘product 10012’;
BEGIN
DECLARE
v_weight NUMBER(3) :=1;
v_message VARCHAR2(255) :=’product 11001’;
v_new_icon VARCHAR2(50) := ‘Eutope’;
BEGIN
v_weight :=v_weight+1;
v_new_icon := ‘Western’ || v_new_icon;
END;
v_weight :=v_weight+1;
v_message :=‘Western’ || ‘ is in stock’;
v_new_icon := ‘Western’ || v_new_icon;
END;

Q1. Evaluate the PL/SQL block above and determine the data type and 
values of each of the following variables according to the rules of 
scoping.

Answer
a. The value of V_WEIGHT at the position 1 is.

2 THE data type is NUMBER
b. The value of V_NEW_LOC at position 1 is .
Western Europe The data type is VARCHAR2

c. The value of V_WEIGHT at position 2 is .
601 The data type is NUMBER

d. The value of V_MESSAGE at position 2 is.
Product 10012 is in Stock The data type is VARCHAR2 

e. The value of V_NEW_LOC at position 2 is.
Illegal Becausev_new_loc is not visible outside the block.

Q2. Scope Example 
DECLARE
v_customer VARCHAR2(50) := ‘Womansport’;
v_credit_rating VARCHAR2(50) := ‘ EXCELLENT’;
BEGIN
DECLARE
v_customer NUMBER(7):=201;
v_name VARCHAR2(25) := ‘Unisport’;
BEGIN
v_customerv_name v_credit_rating
END;
v_customerv_name v_credit_rating
END;

Answer
Suppose you embed a subblock within a block as shown 
above. You declare two variables V_CUSTOMER and 
V_CREDIT_RATING, in the main block. You also declare two 
variables V_CUSTOMER and V_NAME, in the subblock. 
Determine the values and data types for each of the 
following cases.

a. The value of V_CUSTOMER in the subblock is.
201 the data type is NUMBER 

b. The value of V_NAME in the subblock is.
UNISPORT and 
The data type is VARCHAR2 

c. The value of V_CREDIT_RATING in the subblock is.
EXCELLENGT 
The data type is VARCHAR2

d. The value of V_CUSTOMER in the block is.
Womansport the data type is VARCHAR2

e. The value of V_NAME in the block is.
V_NAME is not visible in the main block and you 
would see an erroe.

f. The value of V_CREDIT_RATING in the main block is.
EXCELLENT The data type is VARCHAR2

Q3. Createand execute a PL/SQL block that accepts two numbers through 
iSQL*Plus substitution variables.
(a) Use the DEFINE command to provide the two values.
DEFINE p_num1 =2
DEFINE p_num2 =4 
(b) Pass the two values defined in step a above, to the PL/SQL 
block through iSQL*Plus substitution variables. The first 
number should be divided by the second number and have the 
second number added to the result should be stored in a 
PL/SQL variable and printed on the screen.

Answer 
SET ECHO OFF 
SET VARIFY OFF
SET SERVEROUTPUT ON 
DEFINE p_num1= 2
DEFINE p_num2 =4
DECLARE
V_num1 NUMBER(9,2) := &p_num1;
V_num2 NUMBER(9,3):=&p_num2;
V_result NUMBER(9,3) ;
BEGIN
V_resutl := (V_num1/ V_num2) + V_num2;
DBMS_OUTPUT.PUT_LINE(V_result);



END;
SET ECHO ON
SET VARIFY ON
SET SERVEROUTPUT OFF

Q4. Build a PL/SQL block that computes the total compensation for one 
year.
a. The annual salary and the annual bonus percentage values are 
defined using the DEFINE command.
b. Pass the values defined in the above step to the PL/SQL block 
through iSQl*Plus substitution variables. The bonus must be 
converted from a whole number to a decimal. if the salary is null 
set it zero before computing the total compensation. Execute the 
PL/SQL block. 
NOTE: total compensation is the sum of the annual salary and 
annual bonus.
To test the NVL function, set the DEFINE variable equal to NULL.

Answer
DEFINE p_salary = 5000
DEFINE p_bonus= 10
SET VARIFY OFF
SET SERVEROUTPUT ON 
DEFINE p_salary =5000
DEFINE p_bonus =10
DECLARE
V_salaryNUMBER :=&p_salary;
V_bonusNUMBER :=&p_bonus;
BEGIN
Dbms_output.put_line (TO_CHAR(NVL (v_salary,0)*(1+NVL (V_bonus,0)/10)));
END;
SET VARIFY ON
SET SERVEROUTPUT OFF 

                           
                           
                           Practice : 03
                         
                    Interacting With the oracle Server
                            
Q1. Create a PL/SQL block that selects the maximum department number in 
the DEPARTMENTS table and stores it in an iSQL*Plus variable. Print the 
result to the screen. Save your PL/SQL block in a file named plsql.sql. by 
clicking the save script button.

Answer
VARIABLE g_max_deptno NUMBER
DECLARE 
v_max_deptno NUMBER;
BEGIN 
SELECT max(department_id)
INTO v_max_deptno
FROM departments;
:g_max_deptno := v_max_deptno;
END;

Q2. Modify the PL/SQL block you created in exercise 1 to insert a new 
department into the DEPARTMENTS table. Save the PL/SQL block in a file 
named plsql2.sql. by clicking the save script button.
a. Use the DEFINE command to provide the department name. name 
the new department EDUCATION.

b. Pass the values defined for the department name to the PL/SQL 
block through aiSQL*Plus substitution variables. Rather than 
printing the department number retrieved from exercise 1 add 10 
to it and use it as department number for the new department.

c. Leave the location number as null for now

Answer

SET ECHO OFF
SET VERIFY OFF
DEFINE p_dname = EDUCATION
DECLARE
v_max_deptnodepartments.department_id%TYPE;
BEGIN 
SELECT max (department_id)+10
INTO v_max_deptno
FROM departments;
INSERT INTO departments (department_id, department_name, location_id)
VALUES(v_max_deptno ,'&p_dname',NULL );
COMMIT;
END;
SET VERIFY ON
SET ECHO ON

d. Execute the Pl/SQL block 

e. Display the new department that you created.

SELECT * 
FROM departments
WHERE department_name ='EDUCATION';


Q3. Create a PL/SQL block that updates the location ID for the new 
department that you added in the previous practice. Save your PL/SQL 
block in a file named plsql3.sql. bu clicking the save script button.

a. Use an Isql*Plus variable for the department ID number that you added 
in the previous practice.

b. Use the DEFINE command to provide the location ID.name the new 
location ID 1700. 
DEFINE p_deptno=280
DEFINE p_loc =1700

c. Pass the value to the PL/SQL block through Isql*Plus substitution 

Answer 

SET VERIFY OFF
DEFINE p_deptno=280
DEFINE p_loc= 1700
BEGIN 
UPDATE departments 
SET Location_id = &p_loc
WHERE department_id = &p_deptno;
COMMIT;
END;
/
SET VERIFY ON

d. Display the department that you updated.

SELECT * 
FROM departments
WHERE department_id= &p_deptno;
variable. Test the Pl/SQL block.


Q4. Createa PL/SQL block that deletes the department that you created in 
exercise 2. Save the PL/SQL block in a file named plsql3.sql .

a. Use the DEFINE command to provide the department ID 
DEFINE p_deptno= 280

b. Pass the values to the PL/SQL block through aIsql*Plus substitution 
variable. Print to the screen the number of rows affected.

SET VERIFY OFF
VARIABLE g_resultVARCHAR2(40)
DEFINE p_deptno=280 
DECLARE
v_result NUMBER(2);
BEGIN
DELETE 
FROM departments 
WHERE department_id= &p_deptno;
v_result := SQL%ROWCOUNT;
:g_result :=(TO_CHAR(v_result)||'rows deleted.');
COMMIT;
END;
PRINT g_result
SEt VERIFY ON

c. Test the PL/SQL block .
SELECT *
FROM departments
WHERE department_id=280;
