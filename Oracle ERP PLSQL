                      Practice 01
                  Declaring Variables
Q1. Evaluate each of the following declarations. Which of them are not legal 
and explain why.

Answer
a. DECLARE 
V_id NUMBER(4);
Legal

b. DECLARE 
V_x ,v_y , v_z VARCHAR2(10);
Illegal Because only one identifier per declaration is 
allowed.

c. DECLARE
V_birthdate DATE NOT NULL;
Illegal Because the NOT NULL variable must be initialized .

d. DECLARE 
V_in_stock BOOLEAN :=1;
Illegal Because 1 is not a BOOLEAN Expression.

Q2. In each of the following assignments, indicates whether the statement is 
valid and what the valid data type of the result will be .

Answer
a. V_days_to_go := v_due_date – SYSDATE;
Valid ; NUMBER

b. V_sender := USER || ‘ : ‘|| TO_CHAR(v_dept_no);
Valid ; Character String

c. v_sum := $100,000+$250,000;
illegal ; PL / SQL can not convert special symbols from 
VARCHAR2 to NUMBER

d. v_flag := TRUE; 
Valid : BOOLEAN

e. v_nl := v_n2> (2* v_n3);
Valid ; BOOLEAN

f. v_value := NULL;
Valid ; any scalar data type.

Q3. Create a anonymous block to output the phrase 
“My PL/SQL Block Works” to screen.

Answer
VARIABLE g_message VARCHAR2(40);
DECLARE 
v_message VARCHAR2(40);
BEGIN 
v_message := 'MY PL/SQL Block Works';
:g_message := v_message;
END;


Q4. Create a block that declares two variables. Assign the values of these 
PL/SQL variables to iSQL*Plus host variables and print the result of the 
PL/SQL variables to the screen.
V_CHAR Character (variable length)
V_NUM Number
Assign values to these variables as followes
Variable values
V_CHAR The literal ’42 is the answer’
V_NUM The first two Characters from V_CHAR

Answer:
VARIABLE g_char VARCHAR2(40)
VARIABLE g_num NUMBER
DECLARE 
v_char VARCHAR2(40);
v_num NUMBER (10,2);
BEGIN
v_char := ’42 is the answer’;
v_num:=42;
:g_char :=v_char;
:g_num :=v_num;
END;



                 Practice : 02
         Write Executable Statements
PL/SQL BLOCK
DECLARE 
v_weight NUMBER(3) :600;
v_message VARCHAR2(255) := ‘product 10012’;
BEGIN
DECLARE
v_weight NUMBER(3) :=1;
v_message VARCHAR2(255) :=’product 11001’;
v_new_icon VARCHAR2(50) := ‘Eutope’;
BEGIN
v_weight :=v_weight+1;
v_new_icon := ‘Western’ || v_new_icon;
END;
v_weight :=v_weight+1;
v_message :=‘Western’ || ‘ is in stock’;
v_new_icon := ‘Western’ || v_new_icon;
END;

Q1. Evaluate the PL/SQL block above and determine the data type and 
values of each of the following variables according to the rules of 
scoping.

Answer
a. The value of V_WEIGHT at the position 1 is.

2 THE data type is NUMBER
b. The value of V_NEW_LOC at position 1 is .
Western Europe The data type is VARCHAR2

c. The value of V_WEIGHT at position 2 is .
601 The data type is NUMBER

d. The value of V_MESSAGE at position 2 is.
Product 10012 is in Stock The data type is VARCHAR2 

e. The value of V_NEW_LOC at position 2 is.
Illegal Becausev_new_loc is not visible outside the block.

Q2. Scope Example 
DECLARE
v_customer VARCHAR2(50) := ‘Womansport’;
v_credit_rating VARCHAR2(50) := ‘ EXCELLENT’;
BEGIN
DECLARE
v_customer NUMBER(7):=201;
v_name VARCHAR2(25) := ‘Unisport’;
BEGIN
v_customerv_name v_credit_rating
END;
v_customerv_name v_credit_rating
END;

Answer
Suppose you embed a subblock within a block as shown 
above. You declare two variables V_CUSTOMER and 
V_CREDIT_RATING, in the main block. You also declare two 
variables V_CUSTOMER and V_NAME, in the subblock. 
Determine the values and data types for each of the 
following cases.

a. The value of V_CUSTOMER in the subblock is.
201 the data type is NUMBER 

b. The value of V_NAME in the subblock is.
UNISPORT and 
The data type is VARCHAR2 

c. The value of V_CREDIT_RATING in the subblock is.
EXCELLENGT 
The data type is VARCHAR2

d. The value of V_CUSTOMER in the block is.
Womansport the data type is VARCHAR2

e. The value of V_NAME in the block is.
V_NAME is not visible in the main block and you 
would see an erroe.

f. The value of V_CREDIT_RATING in the main block is.
EXCELLENT The data type is VARCHAR2

Q3. Createand execute a PL/SQL block that accepts two numbers through 
iSQL*Plus substitution variables.
(a) Use the DEFINE command to provide the two values.
DEFINE p_num1 =2
DEFINE p_num2 =4 
(b) Pass the two values defined in step a above, to the PL/SQL 
block through iSQL*Plus substitution variables. The first 
number should be divided by the second number and have the 
second number added to the result should be stored in a 
PL/SQL variable and printed on the screen.

Answer 
SET ECHO OFF 
SET VARIFY OFF
SET SERVEROUTPUT ON 
DEFINE p_num1= 2
DEFINE p_num2 =4
DECLARE
V_num1 NUMBER(9,2) := &p_num1;
V_num2 NUMBER(9,3):=&p_num2;
V_result NUMBER(9,3) ;
BEGIN
V_resutl := (V_num1/ V_num2) + V_num2;
DBMS_OUTPUT.PUT_LINE(V_result);



END;
SET ECHO ON
SET VARIFY ON
SET SERVEROUTPUT OFF

Q4. Build a PL/SQL block that computes the total compensation for one 
year.
a. The annual salary and the annual bonus percentage values are 
defined using the DEFINE command.
b. Pass the values defined in the above step to the PL/SQL block 
through iSQl*Plus substitution variables. The bonus must be 
converted from a whole number to a decimal. if the salary is null 
set it zero before computing the total compensation. Execute the 
PL/SQL block. 
NOTE: total compensation is the sum of the annual salary and 
annual bonus.
To test the NVL function, set the DEFINE variable equal to NULL.

Answer
DEFINE p_salary = 5000
DEFINE p_bonus= 10
SET VARIFY OFF
SET SERVEROUTPUT ON 
DEFINE p_salary =5000
DEFINE p_bonus =10
DECLARE
V_salaryNUMBER :=&p_salary;
V_bonusNUMBER :=&p_bonus;
BEGIN
Dbms_output.put_line (TO_CHAR(NVL (v_salary,0)*(1+NVL (V_bonus,0)/10)));
END;
SET VARIFY ON
SET SERVEROUTPUT OFF 

                           
                           
                           Practice : 03
                         
                    Interacting With the oracle Server
                            
Q1. Create a PL/SQL block that selects the maximum department number in 
the DEPARTMENTS table and stores it in an iSQL*Plus variable. Print the 
result to the screen. Save your PL/SQL block in a file named plsql.sql. by 
clicking the save script button.

Answer
VARIABLE g_max_deptno NUMBER
DECLARE 
v_max_deptno NUMBER;
BEGIN 
SELECT max(department_id)
INTO v_max_deptno
FROM departments;
:g_max_deptno := v_max_deptno;
END;

Q2. Modify the PL/SQL block you created in exercise 1 to insert a new 
department into the DEPARTMENTS table. Save the PL/SQL block in a file 
named plsql2.sql. by clicking the save script button.
a. Use the DEFINE command to provide the department name. name 
the new department EDUCATION.

b. Pass the values defined for the department name to the PL/SQL 
block through aiSQL*Plus substitution variables. Rather than 
printing the department number retrieved from exercise 1 add 10 
to it and use it as department number for the new department.

c. Leave the location number as null for now

Answer

SET ECHO OFF
SET VERIFY OFF
DEFINE p_dname = EDUCATION
DECLARE
v_max_deptnodepartments.department_id%TYPE;
BEGIN 
SELECT max (department_id)+10
INTO v_max_deptno
FROM departments;
INSERT INTO departments (department_id, department_name, location_id)
VALUES(v_max_deptno ,'&p_dname',NULL );
COMMIT;
END;
SET VERIFY ON
SET ECHO ON

d. Execute the Pl/SQL block 

e. Display the new department that you created.

SELECT * 
FROM departments
WHERE department_name ='EDUCATION';


Q3. Create a PL/SQL block that updates the location ID for the new 
department that you added in the previous practice. Save your PL/SQL 
block in a file named plsql3.sql. bu clicking the save script button.

a. Use an Isql*Plus variable for the department ID number that you added 
in the previous practice.

b. Use the DEFINE command to provide the location ID.name the new 
location ID 1700. 
DEFINE p_deptno=280
DEFINE p_loc =1700

c. Pass the value to the PL/SQL block through Isql*Plus substitution 

Answer 

SET VERIFY OFF
DEFINE p_deptno=280
DEFINE p_loc= 1700
BEGIN 
UPDATE departments 
SET Location_id = &p_loc
WHERE department_id = &p_deptno;
COMMIT;
END;
/
SET VERIFY ON

d. Display the department that you updated.

SELECT * 
FROM departments
WHERE department_id= &p_deptno;
variable. Test the Pl/SQL block.


Q4. Createa PL/SQL block that deletes the department that you created in 
exercise 2. Save the PL/SQL block in a file named plsql3.sql .

a. Use the DEFINE command to provide the department ID 
DEFINE p_deptno= 280

b. Pass the values to the PL/SQL block through aIsql*Plus substitution 
variable. Print to the screen the number of rows affected.

SET VERIFY OFF
VARIABLE g_resultVARCHAR2(40)
DEFINE p_deptno=280 
DECLARE
v_result NUMBER(2);
BEGIN
DELETE 
FROM departments 
WHERE department_id= &p_deptno;
v_result := SQL%ROWCOUNT;
:g_result :=(TO_CHAR(v_result)||'rows deleted.');
COMMIT;
END;
PRINT g_result
SEt VERIFY ON

c. Test the PL/SQL block .
SELECT *
FROM departments
WHERE department_id=280;


                                     
                                     Practice 04
                                   
                                  Writing Control Structures


Q1. Execute the command in the file lab04.sql to create the MESSAGES 
tables. Write a PL/SQL block to insert number into the MESSAGES 
table.

CREATE TABLE message (results VARCHAR(60));

a. Insert the numbers 1 to 10 excluding 6 and 8 .

b. Commit before the end of the block.
BEGIN 
FOR I in 1..10 LOOP 
IF I=6 OR I=8 ThEN
NULL;
ELSE
INSERT INTO message (results)
VALUES(i);
END IF;
COMMIT;
END LOOP;
END;
c. Select from the MESSAGES table to verify that your PL/SQL block 
worked.

SELECT *
FROM message;


Q2. Create a PL/SQL block that computes the commission amount for a 
given employee based on the employee’s salary

a. Use the DEFINE command to provide the employee ID. Pass the value to 
th PL/SQL block through isql*plus substitution variable.
DEFINE p_empno=100

b. If the employee’s salary is less than $5,000 display the bonus amount for 
the employee as 10% of the salary.

c. If the employee’s salary between $5,000 and $10,000 display the bonus 
amount for the employee as 15% of the salary.

d. If the employee’s salary exceeds $10,000, display the bonus amount for 
the employees as 20% of the salary.

e. If the employee’s salary is NULL, display the bonus amount for 
employees as for 0.

f. Test the PL/SQL block for each case using the following test case and 
check each bonus amount.

SET SERVEROUTPUT ON
SET VERIFY OFF
DEFINE p_empno =100
DECLARE
v_empnoemployees.employee_id%TYPE :=&p_empno;
v_salemployees.salary%TYPE;
v_bonus_per NUMBER (7,2);
v_bonus NUMBER(7,2);
BEGIN
SELECT salary 
INTO v_sal
FROM employees 
WHERE employee_id =v_empno;
IF v_sal<5000 THEN 
v_bonus_per := .10;
ELSIF v_sal BETWEEN 5000 AND 10000 THEN
v_bonus_per := .15;
ELSIF v_sal> 10000 THEN 
v_bonus_per := .20;
ELSE
v_bonus_per:=0;
END IF;
v_bonus := v_sal *v_bonus_per;
DBMS_OUTPUT.PUT_LINE('The bonus for the employees with employee_id 
'||v_empno||'and salary'||v_sal ||' is'||v_bonus);
END;


Q3. Create an EMP table that is a replica of the EMPLOYEES table. You 
can do this by executing the script lad04_3.sql. add a new column 
STARTS of VARcHAR2 data type and the length of 50 to the EMP table 
for sorting asterisk (*).

Answer ALTER TABLE emp
ADD stars VARCHAR(50);

Q4. Create a PL/SQL block that rewards an employee by appending an 
asterisk in the STARS column for every $1,000 of the employee’s 
salary.

a. Use DEFINE command to provide the employee ID. Pass the value 
to the PL/SQL block through isql*plus substitution variable.
DEFINE p_empno=104

b. Initialize a v_asterisk variable that contains a Null.

c. Append an asterisk to the string for every $1000 of the salary 
amount. For example if the employee has a salary amount of 
$8000 the string of asterisk should be contain eight asterisk. If the 
employee has a salary amount of $12500 the string of asterisk 
should be contain 13 asterisks.

d. Update the STARS column for the employee with the string of 
asterisk.

e. Commit.

f. Test the for the following values.

Answer

DEFINE p_empno=174
DEFINE p_empno=176
SET VERIFY OFF
DEFINE p_empno=174
DECLARE
v_empemp.employee_id%TYPE :=TO_NUMBER(&p_empno);
v_asteriskemp.stars%TYPE :=NULL;
v_salemp.salary%TYPE;
BEGIN
SELECT NVL(ROUND(salary/1000),0)
INTO v_sal
FROM 
emp
WHERE employee_id =v_empno;
FOR I IN 1..v_sal LOOP
v_asterisk :=v_asterisk || '*';
END LOOP;
UPDATE emp
SET stars =v_asterisk
WHERE employee_id =v_empno;
COMMIT;
END;
SET VERIFY ON
g. Display the rows from the EMP table to verify whether your 
PL/SQL block has executed successfully.
SELECT id,salary , stars
FROM emp
WHERE id=174;

                   Practice: 05
          
            Working With Composite Data Types

            
Q1. Write a PL/SQL block to print information about a given country

a. Declare a PL/SQL record based on the structure of the COUNTRIES table.

b. Use the DEFINE command to provide the country ID. Pass the values to 
the PL/SQL block through aisql*Plus substitution variable.

c. Use DBMS_OUTPUT.PUT_LINE to print selected information about the 
country. A sample output is shown below.
Country Id: CA Country Name : Canada Region :2

Answer
SET SERVEROUTPUT ON 
SET VERIFY OFF
DEFINE p_countryid = CA
DECLARE
country_recordcountries%ROWTYPE;
BEGIN
SELECT * 
INTO country_record
FROM countries
WHERE country_id =UPPER('&p_countryid');
DBMS_OUTPUT.PUT_LINE('country_id:'|| 
country_record.country_id||'Country_Nmae:'||country_reco
rd.country_name||'Region:'||country_record.region_id);
END;
SET SERVEROUTPUT OFF
d. Execute and test the Pl/SQL block for the countries with the IDs CA, DE, 
Uk, US.


Q2. Create a PL/SQL block to retrieve the name of each department from the 
DEPARTMENTS table and print each department name on the screen, 
incorporating an INDEX BY table.

a. Declare an INDEX BY table, MT_DEPT_TABLE to temporary store the 
name of the departments.

b. Using a loop, retrieve the name of all departments currently in the 
DEPARTMENTS table and store them in the INDEX BY table. Use the 
following table to assign the values for DEPARTMENT_ID based on 
the value of the counter used in the loop
    
        COUNTER             DEPARTMENT_ID
            1                    10
            2                    20
            3                    50
            4                    60
            5                    80
            6                    90
            7                    110
           
Answer
SET SERVEROUTPUT ON
DECLARE
TYPE DEPT_TABLE_TYPE IS table of departments.department_name%TYPE 
INDEX BY BINARY_INTEGER;
my_dept_tabledept_table_type;
v_count NUMBER(2);
v_deptnodepartments.department_id%TYPE;
BEGIN
SELECT COUNT(*) INTO v_count FROM departments;
FOR I IN 1..v_count
LOOP
IF I=1 THEN
v_deptno:=10;
ELSIF 1=2 THEN
v_deptno:=20;
ELSIF I=3 THEN
v_deptno:=50;
ELSIF I=4 THEN
v_deptno:=60;
ELSIF 1=5 THEN
v_deptno:=80;
ELSIF I=6 THEN
v_deptno:=90;
ELSIF I=7 THEN
v_deptno:=110;
END IF;
SELECT department_name INTO my_dept_table(I) FROM departments 
WHERE department_id = v_deptno;
END LOOP;
FOR I IN 1..v_count
LOOP
DBMS_OUTPUT.PUT_LINE(my_dept_table(I));
END LOOP;
END;
SET SERVEROUTPUT OFF
       
Q3. Modify the block you created in practice 2 to retrieve all information 
about each department from the departments table and print the 
information to the screen incorporating in INDEX BY table of record.

a. Declare an INDEX BY table, MY_DEPT_TABLE, to temporaritly to store 
the number, name and location of all the departments

b. Using a loop, retrieve all department information currently in the 
DEPARTMENTS table and store it in the INDEX BY table. Use the 
following table to assign the values for DEPARTMENT_ID based on the 
value of the counter used in the loop. Exit the loop when then counter 
reaches the value 7.

      COUNTER          DEPARTMENT_ID
          1                10
          2                20
          3                50
          4                60
          5                80
          6                90
          7                110
          
c. Using another loop, retrieve the department information from the 
INDEX BY table and print it to the screen, using 
DBMS_OUTPUT.PUT_LINE

Answer
SET SERVEROUTPUT ON
DECLARE
TYPE DEPT_TABLE_TYPE IS table of departments%ROWTYPE INDEX 
BY BINARY_INTEGER;
my_dept_tabledept_table_type;
v_deptnodepartments.department_id%TYPE;
v_count NUMBER :=7;
BEGIN
SELECT COUNT(*) INTO v_count FROM departments;
FOR I IN 1..v_count
LOOP
IF I=1 THEN
v_deptno:=10;
ELSIF 1=2 THEN
v_deptno:=20;
ELSIF I=3 THEN
v_deptno:=50;
ELSIF I=4 THEN
v_deptno:=60;
ELSIF 1=5 THEN
v_deptno:=80;
ELSIF I=6 THEN
v_deptno:=90;
ELSIF I=7 THEN
v_deptno:=110;
END IF;
SELECT * 
INTO my_dept_table(I) FROM departments 
WHERE department_id = v_deptno;
END LOOP;
FOR I IN 1..v_count
LOOP
DBMS_OUTPUT.PUT_LINE('Department Number:' || 
my_dept_table(I).department_id||'Department Name:'|| 
my_dept_table(I).department_name || 'Manager ID:'|| 
my_dept_table(I).manager_id|| 'Location Id:'|| 
my_dept_table(I).location_id);
END LOOP;
END;
    
                                              Practice:06
                                        Writing Explicit Cursors
                                        
                                        
Q1. Run the command in the script lab06_1.sql to create a new table for 
sorting the salaries of the employees.

Answer: CREATE TABLE top_dogs
(name VARCHAR2(25), salary NUMBER(7));
